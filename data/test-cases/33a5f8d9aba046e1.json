{
  "uid" : "33a5f8d9aba046e1",
  "name" : "Add a new pet > Expected pet keys in response",
  "fullName" : "tests.test_vera.test_pets_post.TestPostAddPet#test_add_pet_keys_in_response",
  "historyId" : "af6e614421af087ee6f09dbcdda870bc",
  "time" : {
    "start" : 1698884965664,
    "stop" : 1698884965908,
    "duration" : 244
  },
  "description" : "\n        The test checks pet keys in json response for the created pet\n        :param pet_data\n        :return: pet keys in response\n        ",
  "descriptionHtml" : "<pre><code>    The test checks pet keys in json response for the created pet\n    :param pet_data\n    :return: pet keys in response\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: None",
  "statusTrace" : "self = <tests.test_vera.test_pets_post.TestPostAddPet object at 0x7f4344150d90>\nheaders = {'Content-Type': 'application/json', 'accept': 'application/json'}\npet_data = {'category': {'id': 49579858, 'name': 'Abyssinian'}, 'id': '9223372016900050437', 'name': 'Milo', 'photoUrls': ['https://example.com/image1.jpg'], ...}\n\n    @allure.title(\"Add a new pet > Expected pet keys in response\")\n    def test_add_pet_keys_in_response(self, headers, pet_data):\n        \"\"\"\n        The test checks pet keys in json response for the created pet\n        :param pet_data\n        :return: pet keys in response\n        \"\"\"\n        response = MyRequests.post(\n            self.url.PET,\n            data=pet_data,\n            headers=headers\n        )\n>       self.assertions.assert_json_has_keys(response, expected_pet_keys)\n\ntests/test_vera/test_pets_post.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>\nnames = ['id', 'category', 'name', 'photoUrls', 'tags', 'status']\n\n    @staticmethod\n    def assert_json_has_keys(response: Response, names: list):\n        try:\n            response_json = response.json()\n            for name in names:\n>               assert name in response_json, logger.error(f\"response JSON doesn't have key {name}\")\nE               AssertionError: None\n\nsrc/utils/assertions.py:30: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "pet_data",
    "time" : {
      "start" : 1698884965664,
      "stop" : 1698884965664,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "headers",
    "time" : {
      "start" : 1698884965664,
      "stop" : 1698884965664,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1698884946801,
      "stop" : 1698884946819,
      "duration" : 18
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n        The test checks pet keys in json response for the created pet\n        :param pet_data\n        :return: pet keys in response\n        ",
    "status" : "failed",
    "statusMessage" : "AssertionError: None",
    "statusTrace" : "self = <tests.test_vera.test_pets_post.TestPostAddPet object at 0x7f4344150d90>\nheaders = {'Content-Type': 'application/json', 'accept': 'application/json'}\npet_data = {'category': {'id': 49579858, 'name': 'Abyssinian'}, 'id': '9223372016900050437', 'name': 'Milo', 'photoUrls': ['https://example.com/image1.jpg'], ...}\n\n    @allure.title(\"Add a new pet > Expected pet keys in response\")\n    def test_add_pet_keys_in_response(self, headers, pet_data):\n        \"\"\"\n        The test checks pet keys in json response for the created pet\n        :param pet_data\n        :return: pet keys in response\n        \"\"\"\n        response = MyRequests.post(\n            self.url.PET,\n            data=pet_data,\n            headers=headers\n        )\n>       self.assertions.assert_json_has_keys(response, expected_pet_keys)\n\ntests/test_vera/test_pets_post.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>\nnames = ['id', 'category', 'name', 'photoUrls', 'tags', 'status']\n\n    @staticmethod\n    def assert_json_has_keys(response: Response, names: list):\n        try:\n            response_json = response.json()\n            for name in names:\n>               assert name in response_json, logger.error(f\"response JSON doesn't have key {name}\")\nE               AssertionError: None\n\nsrc/utils/assertions.py:30: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "d9b6514e92802de2",
      "name" : "log",
      "source" : "d9b6514e92802de2.txt",
      "type" : "text/plain",
      "size" : 416
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "POST: Add a new pet to the store"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_vera"
  }, {
    "name" : "suite",
    "value" : "test_pets_post"
  }, {
    "name" : "subSuite",
    "value" : "TestPostAddPet"
  }, {
    "name" : "host",
    "value" : "fv-az409-651"
  }, {
    "name" : "thread",
    "value" : "2324-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_vera.test_pets_post"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "33a5f8d9aba046e1.json",
  "parameterValues" : [ ]
}