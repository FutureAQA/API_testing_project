{
  "uid" : "7e40fbf0758b03d7",
  "name" : "Get pet by ID > deleted pet > Pet not found error message",
  "fullName" : "tests.test_vera.test_pets_get.TestGetPet#test_get_pet_by_id_after_deleting_text",
  "historyId" : "bbc4588957b64d121513758e911ad253",
  "time" : {
    "start" : 1698884964927,
    "stop" : 1698884965179,
    "duration" : 252
  },
  "description" : "\n        This test to get pet info by ID and ensure \"Pet not found\" error message after deleting the pet\n        :param:  pet_data\n        :return: \"Pet not found\"\n        ",
  "descriptionHtml" : "<pre><code>    This test to get pet info by ID and ensure &quot;Pet not found&quot; error message after deleting the pet\n    :param:  pet_data\n    :return: &quot;Pet not found&quot;\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "KeyError: 'id'",
  "statusTrace" : "self = <tests.test_vera.test_pets_get.TestGetPet object at 0x7f434261d650>\npet_data = {'category': {'id': 27513969, 'name': 'Bernese Mountain Dog'}, 'id': '9223372016900034724', 'name': 'Bailey', 'pet_id': '9223372016900083601', ...}\n\n    @allure.title(\"Get pet by ID > deleted pet > Pet not found error message\")\n    def test_get_pet_by_id_after_deleting_text(self, pet_data):\n        \"\"\"\n        This test to get pet info by ID and ensure \"Pet not found\" error message after deleting the pet\n        :param:  pet_data\n        :return: \"Pet not found\"\n        \"\"\"\n        pet_data[\"pet_id\"] = pet['pet_id']\n        # Creating a pet\n        response = MyRequests.post(\n            self.url.PET,\n            data=pet_data\n        )\n        # Deleting the pet and checking the status code is 200\n>       actual_pet_id = int(response.json()[\"id\"])\nE       KeyError: 'id'\n\ntests/test_vera/test_pets_get.py:169: KeyError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1698884946801,
      "stop" : 1698884946819,
      "duration" : 18
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "pet_data",
    "time" : {
      "start" : 1698884964926,
      "stop" : 1698884964926,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n        This test to get pet info by ID and ensure \"Pet not found\" error message after deleting the pet\n        :param:  pet_data\n        :return: \"Pet not found\"\n        ",
    "status" : "broken",
    "statusMessage" : "KeyError: 'id'",
    "statusTrace" : "self = <tests.test_vera.test_pets_get.TestGetPet object at 0x7f434261d650>\npet_data = {'category': {'id': 27513969, 'name': 'Bernese Mountain Dog'}, 'id': '9223372016900034724', 'name': 'Bailey', 'pet_id': '9223372016900083601', ...}\n\n    @allure.title(\"Get pet by ID > deleted pet > Pet not found error message\")\n    def test_get_pet_by_id_after_deleting_text(self, pet_data):\n        \"\"\"\n        This test to get pet info by ID and ensure \"Pet not found\" error message after deleting the pet\n        :param:  pet_data\n        :return: \"Pet not found\"\n        \"\"\"\n        pet_data[\"pet_id\"] = pet['pet_id']\n        # Creating a pet\n        response = MyRequests.post(\n            self.url.PET,\n            data=pet_data\n        )\n        # Deleting the pet and checking the status code is 200\n>       actual_pet_id = int(response.json()[\"id\"])\nE       KeyError: 'id'\n\ntests/test_vera/test_pets_get.py:169: KeyError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "ce17caeaefc079ae",
      "name" : "log",
      "source" : "ce17caeaefc079ae.txt",
      "type" : "text/plain",
      "size" : 378
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Test GET method for pets"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_vera"
  }, {
    "name" : "suite",
    "value" : "test_pets_get"
  }, {
    "name" : "subSuite",
    "value" : "TestGetPet"
  }, {
    "name" : "host",
    "value" : "fv-az409-651"
  }, {
    "name" : "thread",
    "value" : "2324-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_vera.test_pets_get"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "7e40fbf0758b03d7.json",
  "parameterValues" : [ ]
}