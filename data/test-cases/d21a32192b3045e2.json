{
  "uid" : "d21a32192b3045e2",
  "name" : "Add a new pet > status code 200",
  "fullName" : "tests.test_vera.test_pets_post.TestPostAddPet#test_add_pet_to_store_has_status_code_200",
  "historyId" : "4392014681885407df5d4add555ac72e",
  "time" : {
    "start" : 1698884965186,
    "stop" : 1698884965419,
    "duration" : 233
  },
  "description" : "The test checks status code is 200 for the created pet\n        :param pet_id\n        :return: status code OK 200 ",
  "descriptionHtml" : "<p>The test checks status code is 200 for the created pet\n:param pet_id\n:return: status code OK 200</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: None",
  "statusTrace" : "self = <tests.test_vera.test_pets_post.TestPostAddPet object at 0x7f43425e38d0>\nschema = {'category': {'id': 1, 'name': 'Dogs'}, 'id': '9223372016900083601', 'name': 'doggie', 'photoUrls': ['string'], ...}\n\n    @allure.title(\"Add a new pet > status code 200\")\n    def test_add_pet_to_store_has_status_code_200(self, schema):\n        \"\"\"The test checks status code is 200 for the created pet\n        :param pet_id\n        :return: status code OK 200 \"\"\"\n        schema['id'] = pet['pet_id']\n        response = MyRequests.post(\n            self.url.PET,\n            data=schema\n        )\n>       self.assertions.assert_status_code(response, self.status_code.OK)\n\ntests/test_vera/test_pets_post.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>, expected_status_code = 200\n\n    @staticmethod\n    def assert_status_code(response: Response, expected_status_code: int):\n        actual_status_code = response.status_code\n>       assert actual_status_code == expected_status_code, \\\n            logger.error(f\"Unexpected status code. Expected: {expected_status_code}, Actual: {actual_status_code}\")\nE       AssertionError: None\n\nsrc/utils/assertions.py:13: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "schema",
    "time" : {
      "start" : 1698884965186,
      "stop" : 1698884965186,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1698884946801,
      "stop" : 1698884946819,
      "duration" : 18
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "The test checks status code is 200 for the created pet\n        :param pet_id\n        :return: status code OK 200 ",
    "status" : "failed",
    "statusMessage" : "AssertionError: None",
    "statusTrace" : "self = <tests.test_vera.test_pets_post.TestPostAddPet object at 0x7f43425e38d0>\nschema = {'category': {'id': 1, 'name': 'Dogs'}, 'id': '9223372016900083601', 'name': 'doggie', 'photoUrls': ['string'], ...}\n\n    @allure.title(\"Add a new pet > status code 200\")\n    def test_add_pet_to_store_has_status_code_200(self, schema):\n        \"\"\"The test checks status code is 200 for the created pet\n        :param pet_id\n        :return: status code OK 200 \"\"\"\n        schema['id'] = pet['pet_id']\n        response = MyRequests.post(\n            self.url.PET,\n            data=schema\n        )\n>       self.assertions.assert_status_code(response, self.status_code.OK)\n\ntests/test_vera/test_pets_post.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>, expected_status_code = 200\n\n    @staticmethod\n    def assert_status_code(response: Response, expected_status_code: int):\n        actual_status_code = response.status_code\n>       assert actual_status_code == expected_status_code, \\\n            logger.error(f\"Unexpected status code. Expected: {expected_status_code}, Actual: {actual_status_code}\")\nE       AssertionError: None\n\nsrc/utils/assertions.py:13: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "43145077d3f51c9f",
      "name" : "log",
      "source" : "43145077d3f51c9f.txt",
      "type" : "text/plain",
      "size" : 340
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "POST: Add a new pet to the store"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_vera"
  }, {
    "name" : "suite",
    "value" : "test_pets_post"
  }, {
    "name" : "subSuite",
    "value" : "TestPostAddPet"
  }, {
    "name" : "host",
    "value" : "fv-az409-651"
  }, {
    "name" : "thread",
    "value" : "2324-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_vera.test_pets_post"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "d21a32192b3045e2.json",
  "parameterValues" : [ ]
}