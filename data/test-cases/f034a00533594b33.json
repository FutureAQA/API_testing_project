{
  "uid" : "f034a00533594b33",
  "name" : "Get pet by ID > non existing ID > status code is 404",
  "fullName" : "tests.test_vera.test_pets_get.TestGetPet#test_get_pet_by_non_existing_id_status_code_404",
  "historyId" : "b75673523367a6b191db108dd2a0f53c",
  "time" : {
    "start" : 1699230655847,
    "stop" : 1699230656231,
    "duration" : 384
  },
  "description" : "\n        This test to get pet info by non-existing ID and ensure status code is 404\n        :param: invalid pet_id = -1\n        :return: status code NOT FOUND 404\n        ",
  "descriptionHtml" : "<pre><code>    This test to get pet info by non-existing ID and ensure status code is 404\n    :param: invalid pet_id = -1\n    :return: status code NOT FOUND 404\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Unexpected status code. Expected: 404, Actual: 200\nassert 200 == 404\n +  where 200 = <Response [200]>.status_code\n +  and   404 = <tests.test_vera.data.status_codes.StatusCode object at 0x7f8c8445a010>.NOT_FOUND\n +    where <tests.test_vera.data.status_codes.StatusCode object at 0x7f8c8445a010> = <tests.test_vera.test_pets_get.TestGetPet object at 0x7f8c82753990>.status_code",
  "statusTrace" : "self = <tests.test_vera.test_pets_get.TestGetPet object at 0x7f8c82753990>\n\n    @allure.title(\"Get pet by ID > non existing ID > status code is 404\")\n    def test_get_pet_by_non_existing_id_status_code_404(self):\n        \"\"\"\n        This test to get pet info by non-existing ID and ensure status code is 404\n        :param: invalid pet_id = -1\n        :return: status code NOT FOUND 404\n        \"\"\"\n        pet_id = -1\n        response = MyRequests.get(\n            self.url.PET + f\"/{pet_id}\",\n        )\n>       assert response.status_code == self.status_code.NOT_FOUND, \\\n            f\"Unexpected status code. Expected: {self.status_code.NOT_FOUND}, Actual: {response.status_code}\"\nE       AssertionError: Unexpected status code. Expected: 404, Actual: 200\nE       assert 200 == 404\nE        +  where 200 = <Response [200]>.status_code\nE        +  and   404 = <tests.test_vera.data.status_codes.StatusCode object at 0x7f8c8445a010>.NOT_FOUND\nE        +    where <tests.test_vera.data.status_codes.StatusCode object at 0x7f8c8445a010> = <tests.test_vera.test_pets_get.TestGetPet object at 0x7f8c82753990>.status_code\n\ntests/test_vera/test_pets_get.py:112: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1699230627427,
      "stop" : 1699230627444,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n        This test to get pet info by non-existing ID and ensure status code is 404\n        :param: invalid pet_id = -1\n        :return: status code NOT FOUND 404\n        ",
    "status" : "failed",
    "statusMessage" : "AssertionError: Unexpected status code. Expected: 404, Actual: 200\nassert 200 == 404\n +  where 200 = <Response [200]>.status_code\n +  and   404 = <tests.test_vera.data.status_codes.StatusCode object at 0x7f8c8445a010>.NOT_FOUND\n +    where <tests.test_vera.data.status_codes.StatusCode object at 0x7f8c8445a010> = <tests.test_vera.test_pets_get.TestGetPet object at 0x7f8c82753990>.status_code",
    "statusTrace" : "self = <tests.test_vera.test_pets_get.TestGetPet object at 0x7f8c82753990>\n\n    @allure.title(\"Get pet by ID > non existing ID > status code is 404\")\n    def test_get_pet_by_non_existing_id_status_code_404(self):\n        \"\"\"\n        This test to get pet info by non-existing ID and ensure status code is 404\n        :param: invalid pet_id = -1\n        :return: status code NOT FOUND 404\n        \"\"\"\n        pet_id = -1\n        response = MyRequests.get(\n            self.url.PET + f\"/{pet_id}\",\n        )\n>       assert response.status_code == self.status_code.NOT_FOUND, \\\n            f\"Unexpected status code. Expected: {self.status_code.NOT_FOUND}, Actual: {response.status_code}\"\nE       AssertionError: Unexpected status code. Expected: 404, Actual: 200\nE       assert 200 == 404\nE        +  where 200 = <Response [200]>.status_code\nE        +  and   404 = <tests.test_vera.data.status_codes.StatusCode object at 0x7f8c8445a010>.NOT_FOUND\nE        +    where <tests.test_vera.data.status_codes.StatusCode object at 0x7f8c8445a010> = <tests.test_vera.test_pets_get.TestGetPet object at 0x7f8c82753990>.status_code\n\ntests/test_vera/test_pets_get.py:112: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "9b1dc03f2646b394",
      "name" : "log",
      "source" : "9b1dc03f2646b394.txt",
      "type" : "text/plain",
      "size" : 73
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Test GET method for pets"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_vera"
  }, {
    "name" : "suite",
    "value" : "test_pets_get"
  }, {
    "name" : "subSuite",
    "value" : "TestGetPet"
  }, {
    "name" : "host",
    "value" : "fv-az1107-162"
  }, {
    "name" : "thread",
    "value" : "2235-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_vera.test_pets_get"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "f034a00533594b33.json",
  "parameterValues" : [ ]
}