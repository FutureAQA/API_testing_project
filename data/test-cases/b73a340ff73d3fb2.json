{
  "uid" : "b73a340ff73d3fb2",
  "name" : "Get pet by ID > non existing ID > error messages is 'Pet not found'",
  "fullName" : "tests.test_vera.test_pets_get.TestGetPet#test_get_pet_by_non_existing_id_error_message",
  "historyId" : "e09fb9352d24a4abaf2715315530bb73",
  "time" : {
    "start" : 1699230656238,
    "stop" : 1699230656617,
    "duration" : 379
  },
  "description" : "\n        This test validates error message in the response for retrieving pet information by non-existing ID\n        :param : invalid pet_id = -1\n        :return: test for error message\n        ",
  "descriptionHtml" : "<pre><code>    This test validates error message in the response for retrieving pet information by non-existing ID\n    :param : invalid pet_id = -1\n    :return: test for error message\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Wrong error message\nassert '{\"id\":-1,\"ca...s\":\"invalid\"}' == 'Pet not found'\n  - Pet not found\n  + {\"id\":-1,\"category\":{\"id\":1,\"name\":\"Dogs\"},\"name\":\"doggie\",\"photoUrls\":[\"url1\",\"url2\"],\"tags\":[{\"id\":1,\"name\":\"Tag1\"}],\"status\":\"invalid\"}",
  "statusTrace" : "self = <tests.test_vera.test_pets_get.TestGetPet object at 0x7f8c82750790>\n\n    @allure.title(\"Get pet by ID > non existing ID > error messages is 'Pet not found'\")\n    def test_get_pet_by_non_existing_id_error_message(self):\n        \"\"\"\n        This test validates error message in the response for retrieving pet information by non-existing ID\n        :param : invalid pet_id = -1\n        :return: test for error message\n        \"\"\"\n        pet_id = -1\n        response = MyRequests.get(\n            self.url.PET + f\"/{pet_id}\",\n        )\n>       assert response.text == expected_pet_error_msg[\"not found\"], \"Wrong error message\"\nE       AssertionError: Wrong error message\nE       assert '{\"id\":-1,\"ca...s\":\"invalid\"}' == 'Pet not found'\nE         - Pet not found\nE         + {\"id\":-1,\"category\":{\"id\":1,\"name\":\"Dogs\"},\"name\":\"doggie\",\"photoUrls\":[\"url1\",\"url2\"],\"tags\":[{\"id\":1,\"name\":\"Tag1\"}],\"status\":\"invalid\"}\n\ntests/test_vera/test_pets_get.py:126: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1699230627427,
      "stop" : 1699230627444,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n        This test validates error message in the response for retrieving pet information by non-existing ID\n        :param : invalid pet_id = -1\n        :return: test for error message\n        ",
    "status" : "failed",
    "statusMessage" : "AssertionError: Wrong error message\nassert '{\"id\":-1,\"ca...s\":\"invalid\"}' == 'Pet not found'\n  - Pet not found\n  + {\"id\":-1,\"category\":{\"id\":1,\"name\":\"Dogs\"},\"name\":\"doggie\",\"photoUrls\":[\"url1\",\"url2\"],\"tags\":[{\"id\":1,\"name\":\"Tag1\"}],\"status\":\"invalid\"}",
    "statusTrace" : "self = <tests.test_vera.test_pets_get.TestGetPet object at 0x7f8c82750790>\n\n    @allure.title(\"Get pet by ID > non existing ID > error messages is 'Pet not found'\")\n    def test_get_pet_by_non_existing_id_error_message(self):\n        \"\"\"\n        This test validates error message in the response for retrieving pet information by non-existing ID\n        :param : invalid pet_id = -1\n        :return: test for error message\n        \"\"\"\n        pet_id = -1\n        response = MyRequests.get(\n            self.url.PET + f\"/{pet_id}\",\n        )\n>       assert response.text == expected_pet_error_msg[\"not found\"], \"Wrong error message\"\nE       AssertionError: Wrong error message\nE       assert '{\"id\":-1,\"ca...s\":\"invalid\"}' == 'Pet not found'\nE         - Pet not found\nE         + {\"id\":-1,\"category\":{\"id\":1,\"name\":\"Dogs\"},\"name\":\"doggie\",\"photoUrls\":[\"url1\",\"url2\"],\"tags\":[{\"id\":1,\"name\":\"Tag1\"}],\"status\":\"invalid\"}\n\ntests/test_vera/test_pets_get.py:126: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "beeaa88fdf1fbbe",
      "name" : "log",
      "source" : "beeaa88fdf1fbbe.txt",
      "type" : "text/plain",
      "size" : 73
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Test GET method for pets"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_vera"
  }, {
    "name" : "suite",
    "value" : "test_pets_get"
  }, {
    "name" : "subSuite",
    "value" : "TestGetPet"
  }, {
    "name" : "host",
    "value" : "fv-az1107-162"
  }, {
    "name" : "thread",
    "value" : "2235-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_vera.test_pets_get"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "b73a340ff73d3fb2.json",
  "parameterValues" : [ ]
}